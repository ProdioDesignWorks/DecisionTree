'use strict';Object.defineProperty(exports,'__esModule',{value:!0});var _decisionTree=require('./decision-tree'),_decisionTree2=_interopRequireDefault(_decisionTree),_utilities=require('../utilities'),_storage=require('../storage');function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}function _toConsumableArray(a){if(Array.isArray(a)){for(var b=0,c=Array(a.length);b<a.length;b++)c[b]=a[b];return c}return Array.from(a)}var TreeProto={tree:null,className:'',features:[],persist:!1,learn:!1,load:!1,fixMissingFeatures:!1,debug:!1,train:function j(){var a=0<arguments.length&&arguments[0]!==void 0?arguments[0]:[],b=1<arguments.length&&arguments[1]!==void 0?arguments[1]:{};this.debug&&(0,_utilities.log)('train method called');var c=b.className,d=b.features,e=b.fixMissingFeatures,f=b.persist,g=b.learn,h=b.debug;this.className=(0,_utilities.isDefined)(c)&&!(0,_utilities.isNull)(c)?c:this.className,this.features=(0,_utilities.isDefined)(d)&&(0,_utilities.isArray)(d)&&d.length?d:this.features,this.persist=(0,_utilities.isDefined)(f)?f:this.persist,this.learn=(0,_utilities.isDefined)(g)?g:this.learn,this.debug=(0,_utilities.isDefined)(h)?h:this.debug,this.fixMissingFeatures=(0,_utilities.isDefined)(e)?e:this.fixMissingFeatures,this.debug&&(0,_utilities.log)('\n      className: '+this.className+'\n      features: '+this.features+'\n      persist: '+this.persist+'\n      learn: '+this.learn+'\n    ');var i=this.fixTrainingData(a);this.debug&&(0,_utilities.log)('Fixing training data'),this.tree=new _decisionTree2.default(i,this.className,this.features),this.debug&&(0,_utilities.log)('persist is set: '+this.persist),this.persist&&(this.debug&&(0,_utilities.log)('persisting model'),(0,_storage.persistModel)(this.toJSON(),this.debug),this.debug&&(0,_utilities.log)('model persisted successfully'))},fixTrainingData:function c(){var a=this,b=0<arguments.length&&void 0!==arguments[0]?arguments[0]:[];return this.debug&&(0,_utilities.log)('fixMissingFeatures is set: '+this.fixMissingFeatures),this.fixMissingFeatures?b.reduce(function(b,c){var d=Object.keys(c);return a.features.map(function(a){a.includes(d)||(c[a]='')}),b.push(c),b},[]):b},evaluate:function b(){var a=0<arguments.length&&arguments[0]!==void 0?arguments[0]:{};return(0,_utilities.isNull)(this.tree)||(0,_utilities.isEmpty)(a)?'':this.tree.predict(a)},predict:function e(){var a=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{},b=!!(1<arguments.length&&void 0!==arguments[1])&&arguments[1];if((0,_utilities.isEmpty)(a))return this.debug&&(0,_utilities.log)('Query is invalid'),null;if(!(0,_utilities.isNull)(this.tree)){var c=(0,_utilities.isNull)(this.tree)||(0,_utilities.isEmpty)(a)?'':this.tree.predict(a),d=this.learn||b;if(this.debug&&(0,_utilities.log)('learning mode is: '+b),d){var f=[].concat(_toConsumableArray(this.tree.data),[a]);return this.train(f),c}return c}return this.debug&&(0,_utilities.log)('Tree has been not initialized or untrained'),null},toJSON:function a(){return this.debug&&(0,_utilities.log)('Exporting Decision tree model'),(0,_utilities.isNull)(this.tree)?{}:this.tree.toJSON()},fromJSON:function c(){var a=0<arguments.length&&arguments[0]!==void 0?arguments[0]:{},b=!(0,_utilities.isEmpty)(a);this.debug?b?(0,_utilities.log)('Model is valid'):(0,_utilities.log)('Model is valid or empty'):null,b&&(this.tree=new _decisionTree2.default(a),this.className=this.tree.target,this.features=this.tree.features,this.debug&&(0,_utilities.log)('Model imported successfully'))}};function DecisionTree(){var a=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{},b=a.data,c=void 0===b?[]:b,d=a.className,e=void 0===d?'':d,f=a.features,g=void 0===f?[]:f,h=a.fixMissingFeatures,i=a.persist,j=a.load,k=void 0!==j&&j,l=a.learn,m=a.debug,n=void 0!==m&&m;n&&(0,_utilities.log)('Data provided while initialization, so training the model right now');var o=new _decisionTree2.default(c,e,g);// if (isArray(data) && data.length) {
//     TreeProto.train(data);
// }
if(TreeProto.tree=Object.create(o),TreeProto.className=e,TreeProto.features=g,TreeProto.fixMissingFeatures=void 0!==h&&h,TreeProto.debug=n,TreeProto.persist=void 0!==i&&i,TreeProto.load=k,k){n&&(0,_utilities.log)('Load setting is set: '+k),n&&(0,_utilities.log)('Loading model from previously persisted snapshot');var p=(0,_storage.loadModel)(this.debug);TreeProto.fromJSON(p),n&&(0,_utilities.log)('Import from snapshot complete')}return TreeProto}exports.default=DecisionTree;